;;; ============================================================================
;;; Fichier : compiler-ctrl-flux.lisp
;;; Auteur : MORANDINI Lucas
;;; Date : 23/01/2025
;;; Description : Fichier pour la compilation des expressions de controle de flux
;;; ============================================================================

(defun compile-if (expression)
  (format t "compile-if: ~A~%" expression)
  (let ((conditionif (cadr expression))
        (then (caddr expression))
        (else (cadddr expression))
        (label-else (genlabel))
        (label-end (genlabel)))
        (format t "conditionif: ~A~%" conditionif)
        (format t "is conditionif a list: ~A~%" (listp conditionif))
        (format t "conditionif first element: ~A~%" (car conditionif))
        (format t "conditionif second element: ~A~%" (cadr conditionif))
        (format t "conditionif third element: ~A~%" (caddr conditionif))
        (format t "compiled conditionif: ~A~%" (compile-generic conditionif))
    (append (compile-generic conditionif)
            `((CMP (:CONST nil) :R0)
              (JEQ ,label-else))
            (compile-generic then)
            `((JMP ,label-end)
              (LABEL ,label-else))
            (when else
              (compile-generic else))
            `((LABEL ,label-end)))))

; (defun compile-while (expression)
; (let ((condition (car expression))
;     (body (cadr expression))
;     (label-start (genlabel))
;     (label-end (genlabel)))
;     (append `((LABEL ,label-start))
;     (compile-generic condition)
;     `((CMP (:CONST nil) :R0)
;     (JEQ ,label-end)
;     (compile-generic body)
;     (JMP ,label-start)
;     (LABEL ,label-end)))
;     )
;     )

; (defun compile-for (expression)
; (let ((init (car expression))
;     (condition (cadr expression))
;     (increment (caddr expression))
;     (body (cadddr expression))
;     (label-start (genlabel))
;     (label-end (genlabel)))
;     (append (compile-generic init)
;     `((LABEL ,label-start))
;     (compile-generic condition)
;     `((CMP (:CONST nil) :R0)
;     (JEQ ,label-end)
;     (compile-generic body)
;     (compile-generic increment)
;     (JMP ,label-start)
;     (LABEL ,label-end))
;     )
;     ))

